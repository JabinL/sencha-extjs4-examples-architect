/*
 * File: app/controller/MyController.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Sencha.controller.MyController', {
    extend: 'Ext.app.Controller',

    models: [
        'Product'
    ],
    stores: [
        'Products'
    ],
    views: [
        'ProductGridPanel',
        'ProductWindow'
    ],

    refs: [
        {
            ref: 'productGridPanel',
            selector: 'productgridpanel',
            xtype: 'gridpanel'
        }
    ],

    onEncodeButtonClick: function(button, e, options) {
        var grid = this.getProductGridPanel();

        var encode = (grid.filters.encode !== true);
        var text = 'Encode: ' + (encode ? 'On' : 'Off'); 

        grid.filters.encode = encode;
        grid.filters.reload();
        button.setText(text);
    },

    onLocalFilteringButtonClick: function(button, e, options) {
        var url = {
            local:  'grid-filter.json',  // static data file
            remote: 'grid-filter.php'
        };

        var grid = this.getProductGridPanel();

        var local = (grid.filters.local !== true),
            text = 'Local Filtering: ' + (local ? 'On' : 'Off'),
            newUrl = local ? url.local : url.remote,
            store = grid.view.getStore();

        // update the GridFilter setting
        grid.filters.local = local;
        // bind the store again so GridFilters is listening to appropriate store event
        grid.filters.bindStore(store);
        // update the url for the proxy
        store.proxy.url = newUrl;

        button.setText(text);
        store.load();
    },

    onFilterDataButtonClick: function(button, e, options) {
        var grid = this.getProductGridPanel();

        var data = Ext.encode(grid.filters.getFilterData());

        Ext.Msg.alert('All Filter Data',data);
    },

    onClearFilterButtonClick: function(button, e, options) {
        var grid = this.getProductGridPanel();

        grid.filters.clearFilters();
    },

    onAddColumnsButtonClick: function(button, e, options) {
        var grid = this.getProductGridPanel();

        var columns = [{
            dataIndex: 'date',
            text: 'Date',
            filter: true,
            renderer: Ext.util.Format.dateRenderer('m/d/Y')
        }, {
            dataIndex: 'visible',
            text: 'Visible'
            // this column's filter is defined in the filters feature config
        }];

        if (grid.headerCt.items.length < 6) {
            grid.headerCt.add(columns);
            grid.view.refresh();
            button.disable();
        }
    },

    init: function(application) {
        this.getProductsStore().load();

        this.control({
            "productgridpanel toolbar button[itemId=encode]": {
                click: this.onEncodeButtonClick
            },
            "productgridpanel toolbar button[itemId=localFiltering]": {
                click: this.onLocalFilteringButtonClick
            },
            "productgridpanel toolbar button[itemId=filterData]": {
                click: this.onFilterDataButtonClick
            },
            "productgridpanel toolbar button[itemId=clearFilter]": {
                click: this.onClearFilterButtonClick
            },
            "productgridpanel toolbar button[itemId=addColumns]": {
                click: this.onAddColumnsButtonClick
            }
        });
    }

});
